tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
cran
result3
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
tidyData
tidyData
tidyData <- td[,3:81] %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
td
td$activitylabel
names(ted)
names(td)
tidyData <- td[,3:82] %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
names(td)
dim(td)
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
dim(td)
dim(tidyData)
names(tidyData)
write.table("./tidyData.txt",row.names=FALSE)
getwd()
tidayData
tidyData
knitr::opts_chunk$set(echo = TRUE)
names(tidyData)
names(select(tidyData,-activity))
tidyData
td <- select(td,-activity)
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
tidyData
names(tidyData)
tidyData
write.table(tidyData,"./tidyData.txt",row.names=FALSE)
tidyData
names(select(tidyData,-activity))
names(select(tidyData))
names(tidyData)
tidyData
class(xTrainData)
tidyData
tidyData
knitr::opts_chunk$set(echo = TRUE)
names(tidyData)
dim(tidyData)
names(tidyData)
tidyData
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
knit2html("CodeBook.Rmd")
knit("CodeBook.Rmd")
knitr("CodeBook.Rmd")
tidyData
names(tidyData)
library(knitr)
library(rmarkdown)
knit(input = "CodeBook.Rmd")
render(input = "first.md", output_format = "html_document")
render(input = "CodeBook.Rmd", output_format = "html_document")
knit(input = "CodeBook.Rmd")
render(input = "CodeBook.Rmd", output_format = "html_document")
summary(tidyData)
# Removing redundant activity column
allData_dt <- select(allData_dt, -activity)
td <- tbl_df(allData_dt)
td
td <- select(td,-activity)
td <- select(td)
td
# Removing redundant activity column
allData_dt <- select(allData_dt, -activity)
# Merging the activity labels table with the extracted data table
allData_dt <- merge(allData_dt,activityLabels)
# Removing redundant activity column
allData_dt <- select(allData_dt, -activity)
allData_dt
td <- tbl_df(allData_dt)
td
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_each(funs(mean))
tidyData
td <- tbl_df(allData_dt)
tidyData <- td %>% group_by(activitylabel,subject) %>% summarize_all(funs(mean))
tidyData
# read train data
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/Y_train.txt")
Sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
setwd("~/Documents/Online courses/Data Science - Coursera/Coursera - Getting and Cleaning Data/Week 4/Assignment")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/Y_train.txt")
Sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
Y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
Sub_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
# read data description
variable_names <- read.table("./UCI HAR Dataset/features.txt")
# read activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
# 1. Merges the training and the test sets to create one data set.
X_total <- rbind(X_train, X_test)
Y_total <- rbind(Y_train, Y_test)
Sub_total <- rbind(Sub_train, Sub_test)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
selected_var <- variable_names[grep("mean\\(\\)|std\\(\\)",variable_names[,2]),]
X_total <- X_total[,selected_var[,1]]
# 3. Uses descriptive activity names to name the activities in the data set
colnames(Y_total) <- "activity"
Y_total$activitylabel <- factor(Y_total$activity, labels = as.character(activity_labels[,2]))
activitylabel <- Y_total[,-1]
# 4. Appropriately labels the data set with descriptive variable names.
colnames(X_total) <- variable_names[selected_var[,1],2]
# 5. From the data set in step 4, creates a second, independent tidy data set with the average
# of each variable for each activity and each subject.
colnames(Sub_total) <- "subject"
total <- cbind(X_total, activitylabel, Sub_total)
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
total_mean
setwd("~/Documents/Online courses/Data Science - Coursera/Coursera - Getting and Cleaning Data/Week 4/Assignment/UCI HAR Dataset")
trainData <- read.table("train/X_train.txt")
testData <- read.table("test/X_test.txt")
testLabel<- read.table("test/Y_test.txt")
trainLabel<- read.table("train/Y_train.txt")
trainSubject<- read.table("train/subject_train.txt")
testSubject<- read.table("test/subject_test.txt")
features<- read.table("features.txt")
#mearging datasets
testTemp<- cbind(testSubject,testLabel)
testFinal<- cbind(testTemp,testData)
trainTemp<- cbind(trainSubject,trainLabel)
trainFinal<- cbind(trainTemp,trainData)
finalDataSet<- rbind(trainFinal,testFinal)
featureVector<- as.vector(features[,2])
featureVector<- append(featureVector, "Subject ID", after=0)
featureVector<-append(featureVector, "Activity", after=1)
colnames(finalDataSet)<- featureVector
finalDataSet$Activity<-as.character(finalDataSet$Activity)
finalDataSet$Activity[finalDataSet$Activity == "1"] <- "WALKING"
finalDataSet$Activity[finalDataSet$Activity == "2"] <- "WALKING_UPSTAIRS"
finalDataSet$Activity[finalDataSet$Activity == "3"] <- "WALKING_DOWNSTAIRS"
finalDataSet$Activity[finalDataSet$Activity == "4"] <- "SITTING"
finalDataSet$Activity[finalDataSet$Activity == "5"] <- "STANDING"
finalDataSet$Activity[finalDataSet$Activity == "6"] <- "LAYING"
#extracting measurements on mean only
meanData<- finalDataSet[grepl("mean", colnames(finalDataSet)) | grepl("std", colnames(finalDataSet))| grepl("Activity", colnames(finalDataSet))| grepl("Subject ID", colnames(finalDataSet))]
meanData
names(meanData)
#splitting to different Subject+Activity combinations
#answerList <- split(finalDataSet, list(finalDataSet$Subject, finalDataSet$Task))
answerList <- split(meanData, list(meanData$`Subject ID`, meanData$Activity))
#calculating average of each combination
now<- lapply(answerList, function(df) colMeans(as.data.frame(df)[,3:81]))
now
#converting list to a dataframe
answerDataFrame<- as.data.frame(now)
answerDataFrame
tidyData
setwd("~/Documents/Online courses/Data Science - Coursera/Coursera - Exploratory Data Analysis/Week 1")
# Five Number summary
summary(mtcars)
# Five Number summary
summary(mtcars$mpg)
# Boxplot
boxplot(mtcars$mpg, col="blue")
# Histogram
hist(mtcars$mpg, col="green")
rug(mtcar$mpg)
rug(mtcars$mpg)
hist(mtcars$mpg, col="green", breaks=100)
hist(mtcars$mpg, col="green", breaks=30)
# Histogram
hist(mtcars$mpg, col="green")
hist(mtcars$mpg, col="green", breaks=50)
abline(h = 1.5)
# Overlaying Features
boxplot(mtcars$mpg, col="blue")
abline(h = 23)
hist(mtcars$mpg, col="green", breaks=50)
abline(v=12,lwd=2)
abline(v=20,lwd=2)
hist(mtcars$mpg, col="green", breaks=50)
abline(v=20,lwd=2)
abline(v = median(mtcars$mpg), col="magenta",lwd = 4)
# Barplot
barplot(table(mtcars$mpg))
mtcars
# Barplot
barplot(table(mtcars$cyl), col="wheat", main ="insert text here")
# Barplot
barplot(table(mtcars$cyl), col="wheat", main ="Number of cars categorized by cylinder count")
# Multiple box plots
boxplot(mpg ~ cyl,data = mtcars, col="blue")
# Multiple box plots
boxplot(mpg ~ cyl,data = mtcars, col="red")
# Multiple Histograms
par(mfrow = c(3,1), mar = c(4,4,2,1))
hist(subset(mtcars, cyl == 8)$mpg, col="green")
hist(subset(mtcars, cyl == 6)$mpg, col="green")
hist(subset(mtcars, cyl == 4)$mpg, col="green")
# Scatterplot
with(mtcars, plot(hp,qsec))
par(mfroe =c(1,1))
par(mfrow =c(1,1))
# Scatterplot
with(mtcars, plot(hp,qsec))
abline(h = 12,lwd = 2, lty = 2)
abline(h = 12,lwd = 100, lty = 2)
abline(h = 120,lwd = 100, lty = 2)
# Scatterplot
with(mtcars, plot(hp,qsec, col=cyl))
abline(h = 120,lwd = 100, lty = 2)
abline(h = 120,lwd = 100, lty = 100)
par(mfrow = c(1,3), mar = c(5,4,2,1))
with(subset(mtcars, cyl == 8), plot(hp,qsec, main="Cyl - 8"))
with(subset(mtcars, cyl == 6), plot(hp,qsec, main="Cyl - 6"))
with(subset(mtcars, cyl == 4), plot(hp,qsec, main="Cyl - 4"))
par(mfrow = c(1,2), mar = c(5,4,2,1))
with(subset(mtcars, cyl == 8), plot(hp,qsec, main="Cyl - 8"))
with(subset(mtcars, cyl == 6), plot(hp,qsec, main="Cyl - 6"))
with(subset(mtcars, cyl == 4), plot(hp,qsec, main="Cyl - 4"))
par(mfrow = c(1,3), mar = c(5,4,2,1))
with(subset(mtcars, cyl == 8), plot(hp,qsec, main="Cyl - 8"))
with(subset(mtcars, cyl == 6), plot(hp,qsec, main="Cyl - 6"))
with(subset(mtcars, cyl == 4), plot(hp,qsec, main="Cyl - 4"))
# Base plot
library(datasets)
data(cars)
with(cars, plot(speed,dist))
## Lattice Plotting System
library(lattice)
state.x77
state <- data.frame(state.x77, region = state.region)
state
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
par(mfrow = c(1,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
## ggplot2 system
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
## Base Plotting System
library(datasets )
## Base Plotting System
library(datasets)
hist(Airquiality$Ozone)
hist(airquality$Ozone)
with(airquality, plot(Ozone,Wind))
with(airquality, plot(Wind,Ozone))
airquality
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb")
with(airquality, plot(Wind,Ozone), pch = "a")
with(airquality, plot(Wind,Ozone, pch = "a"))
with(airquality, plot(Wind,Ozone, pch = "sda"))
par("lty")
par("bg")
par("las")
par("mfrow")
par("mar")
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
with(subset(airquality, Month == 5), points(Wind,Ozone, col="blue")
with(subset(airquality, Month == 5), points(Wind,Ozone, col="blue"))
with(subset(airquality, Month == 5), points(Wind,Ozone, col="blue"))
with(airquality, plot(Wind,Ozone),main = "Ozone and Wind in New York City", type="n")
with(airquality, plot(Wind,Ozone),main = "Ozone and Wind in New York City", type="n")
with(subset(airquality, Month == 5), points(Wind,Ozone, col="blue"))
with(subset(airquality, Month != 5), points(Wind,Ozone, col="red"))
legend("topright", pch = 2, col = c("blue","red"), legend = c("May", "Other Months"))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind,Ozone),main = "Ozone and Wind in New York City", pch = 20)
with(airquality, plot(Wind,Ozone,main = "Ozone and Wind in New York City", type="n"))
with(subset(airquality, Month == 5), points(Wind,Ozone, col="blue"))
with(subset(airquality, Month != 5), points(Wind,Ozone, col="red"))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone~Wind airquality)
model <- lm(Ozone~Wind, airquality)
abline(model, lwd = 2)
with(airquality, {
plot(Wind,Ozone, main="Ozone and Wind")
plot(Solar.R,Ozone, main="Ozone and Solar Radiation")
})
par(mfrow = c(1,2))
with(airquality, {
plot(Wind,Ozone, main="Ozone and Wind")
plot(Solar.R,Ozone, main="Ozone and Solar Radiation")
})
par(mfrow = c(1,3))
with(airquality, {
plot(Wind,Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main="Ozone and Solar Radiation")
plot(Temp,Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in the New York City", outer = TRUE)
})
par(mfrow = c(1,3), mar=c(4,4,2,1), omac(0,0,2,0))
with(airquality, {
plot(Wind,Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main="Ozone and Solar Radiation")
plot(Temp,Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in the New York City", outer = TRUE)
})
par(mfrow = c(1,3), mar=c(4,4,2,1), omac(0,0,2,0))
par(mfrow = c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(airquality, {
plot(Wind,Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main="Ozone and Solar Radiation")
plot(Temp,Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in the New York City", outer = TRUE)
})
par("mar")
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
par(mfrow = c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
hist(x)
par(mfrow=c(1,1))
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
y <- rnorm(200)
plot(x,y)
y <- rnorm(100)
plot(x,y)
plot(x,z)
z <- rnorm(100)
plot(x,z)
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,4,2,2))
plot(x,y)
plot(x,y, pch = 20)
plot(x,y, pch = 2)
plot(x,y, pch = 19)
plot(x,y, pch = 4)
example(points)
plot(x,y, pch = 21)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, pch = 21)
plot(x,y, pch = 21, col="blue", bg="red")
plot(x,y, pch = 1, col="blue", bg="red")
plot(x,y, pch = 21, col="blue", bg="red")
plot(x,y, pch = 20)
plot(x,y, pch = 19)
plot(x,y, pch = 3)
plot(x,y, pch = 2)
plot(x,y, pch = 4)
example(points)
plot(x,y, pch = 21, col="blue", bg="red")
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, pch = 20)
title("Scatterplot")
text(-2,-2,"Label")
legend("topleft", legend = "Data", pch 19)
legend("topleft", legend = "Data", pch = 19)
legend("topleft", legend = "Data", pch = 20)
Fit <- lm(y ~ x)
abline(Fit)
abline(Fit, lwd=2)
abline(Fit, lwd=3)
abline(Fit, lwd=1, col="blue")
abline(Fit, lwd=3, col="blue")
plot(x,y, xlab= "Weight", ylab="Height", main="Scatterplot", pch = 20)
legend("topright", pch = 20, legend = "Data")
fit <- lm(y~x)
fit <- lm(y~x)
abline(fit, lwd = 3, col="red")
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y, pch = 20)
plot(x,z, pch = 19)
par("mar")
par(mar = c(2,2,1,1))
plot(x,y, pch = 20)
plot(x,z, pch = 19)
par(mfrow=c(1,2))
plot(x,y, pch = 20)
plot(x,z, pch = 19)
par(mar=c(4,4,2,2))
plot(x,y, pch = 20)
plot(x,z, pch = 19)
par(mfrow=c(2,2))
plot(x,y)
plot(x,z)
plot(z,x)
plot(y,x)
par(mfcol=c(2,2))
plot(x,y)
plot(x,z)
plotz,x
plot(z,x)
plot(y,x)
par(mfrow=c(1,1))
x <- rnorm(100)
y <- x + rnorm(100 )
g <-  gl(2, 50, labels = c("Male","Female"))
str(g)
plot(x,y)
plot(x,y,type="n")
points[x[g == "Male"],y[g=="Male"]]
points(x[g == "Male"],y[g=="Male"], col="green")
points(x[g == "Female"], y[g== "Female"], col="red")
points(x[g == "Female"], y[g== "Female"], col="red", pch = 19)
library(datasets)
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser Data")
dev.copy(png,file="geyserplot.png")
dev.off()
dev.copy(jpeg,file="geyserplot.jpeg")
dev.off()
title(main="Old Faithful Geyser Data")
dev.copy(pdf,file="geyserplot.pdf")
dev.off()
# Creating plots on file devices
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser Data")
dev.off()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("R Programming")
swirl()
pollution
head(pollution)
dim(pollution)
summary(pollutions)
summary(pollution)
summary(pollution$om25)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
rug(low)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(ppm,v=median(ppm), col="magenta", lwd = 4)
abline(v=median(ppm), col="magenta", lwd = 4)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col="wheat", main="Number of Countries of Each Region")
barplot(reg,col="wheat", main="Number of Counties of Each Region")
barplot(reg,col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- plot(subset(pollution,region=="east"))
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
west <- subset(pollution,region=="west")
plot(subset(pollution,region=="west"))
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution,plot(lattitude, pm25))
with(pollution,plot(latitude, pm25))
abline(h=12,lwd=2, lty=2)
col
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
main("Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~income | region, state,layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state,layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state,layout = c(2,2))
head(mpg)
dim(mpg)
tabble(mpg$model)
table(mpg$model)
qplot(displ,hwy,mpg)
names(mpg)
qplot(displ,hwy,data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab="Month", ylab="Ozone (ppb)", col.axis = "blue")
main()
